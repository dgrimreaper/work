#!/usr/bin/perl

#use POSIX;
use Getopt::Long;
use Pod::Usage;
use Date::Format;
use strict;
use warnings;

my $startdate;
my $enddate;
my @date=localtime();
my $year=strftime("%Y",@date);
my $quarter=strftime("%q",@date);
my $user;
my $usedmem=0;

if ($quarter==1) {
        $startdate = "$year-01-01T00:00:00";
        $enddate = "$year-03-31T23:59:59";
    } elsif ($quarter==2) {
        $startdate = "$year-04-01T00:00:00";
        $enddate = "$year-06-30T23:59:59";
    } elsif ($quarter==3) {
        $startdate = "$year-07-01T00:00:00";
        $enddate = "$year-09-30T23:59:59";
    } elsif ($quarter==4) {
        $startdate = "$year-10-01T00:00:00";
        $enddate = "$year-12-31T23:59:59";
    } else { die "What kind of year has more than 4 quarters!" }

my $help = 0;
my @projects;
my $userproject = $ENV{'IVEC_PROJECT'};
my $cluster = $ENV{'IVEC_CLUSTER'};
my @groups = split /\s+/,`groups`;
my $mygroups = 0;
my $partition;
my $feature;
my $shared=0; #Whether nodes are shared

GetOptions ("project=s" => \@projects,          # Project to gather data for
    "cluster=s" => \$cluster,                   # Cluster to gather data for
    "mygroups" => \$mygroups,                   # Whether to print information about all groups the user is in
    "begin=s" => \$startdate,                   # Override start and end dates
    "end=s" => \$enddate,
    "user=s" => \$user,
    "shared=s" => \$shared,
    "usedmem=s" => \$usedmem,
    "partition=s" => \$partition,
    "feature=s" => \$feature,
    "help|?" => \$help,
);

pod2usage(1) if $help;

if (defined $userproject and length $userproject and scalar @projects==0) { push @projects, $userproject};
if ($mygroups) { @projects = @groups; }

die "Project not set, see help to specify project.\n" unless (scalar @projects>0);
die "Cluster not set, see help to specify cluster.\n" unless length $cluster;
my $project = join(',',@projects);
my $projectstr = '';
if ($project ne 'all') {$projectstr = "-A $project";};
my $userstr = '-a';
if (defined $user) {$userstr = "-u $user";};
my $partitionstr = '';
if (defined $partition) {$partitionstr = "-r $partition";};

sub toGB {
  my $num = $_[0];
  my $amount = 0;
  if ($num =~ s/[Gg].*//) { $amount = $num };
  if ($num =~ s/[Mm].*//) { $amount = $num/1000 };
  if ($num =~ s/[Kk].*//) { $amount = $num/1000000 };
  return $amount;
}

sub toHours {
  #[DD-[hh:]]mm:ss
  /(?:(\d+)-)?(?:(\d+):)?(\d+):(\d+)/;
  my $days=$1 // 0;
  my $hours=$2 // 0;
  my $minutes=$3 // 0;
  my $seconds=$4 // 0;
  my $answer=$days*24 + $hours + $minutes/60 + $seconds/3600;
  return $answer;
}

sub lbound {
  #[128-256) - returns 128
  $_[0] =~ /(\d+)-\d+/;
  return $1;
}

sub histogram {
  my $n = shift;
  my $histlow = "0";
  my $histhigh = "0";
  if ($n<1) {
    $histlow = "0";
    $histhigh = "0";
  } else {
    my $tmp = int(log($n) / log(2));
    $histlow = 2 ** ($tmp);
    $histhigh = 2 ** ($tmp+1);
  }
  return "[$histlow\-$histhigh)";
}

my %count;
my $nodehist;
my $memreqhist;
my $memusedhist;
my %elapsed;
my %maxelapsed;
my %usage;
my $totaljobs = 0;
my $totalusage = 0;

open(SACCT,"sacct -n -M $cluster $userstr $partitionstr $projectstr -P -S $startdate -E $enddate -X -T --format=jobid,user,account,reqcpus,alloccpus,nnodes,reqmem,MaxRSS,MaxVMSize,State,CPUTimeRAW,NCPUS,Elapsed |");
print "sacct -n -M $cluster $userstr $partitionstr $projectstr -P -S $startdate -E $enddate -X -T --format=jobid,user,account,reqcpus,alloccpus,nnodes,reqmem,MaxRSS,MaxVMSize,State,CPUTimeRAW,NCPUS,Elapsed\n";
while(<SACCT>){
#    next if /^[0-9]*\.batch/; # remove .batch but leave in job array components.
    chomp;
    my @fields=split /\|/;
    my $jobid     = $fields[0];
    my $node      = $fields[5];
    my $state     = $fields[9];
    next if $state =~ /PENDING/;
    my $size_req  = toGB($fields[6]);
    my $size_used = toGB($fields[7]);
    my $cputimeraw   = $fields[10];
    my $ncpus   = $fields[11];
    my $elapsed = $fields[12];
    my $elapsedH = toHours($elapsed);
    my $memreqhist = histogram($size_req);
    my $memusedhist = histogram($size_used);
    my $nodehist = histogram($node);

    # Reset it all to zero.
    $count{'bynodereq'}{$nodehist} //= 0;
    $count{'bymemreq'}{$memreqhist} //= 0;
    $count{'bymemused'}{$memusedhist} //= 0;
    $elapsed{'bymemreq'}{$memreqhist} //= 0;
    $elapsed{'bymemused'}{$memusedhist} //= 0;
    $elapsed{'bynodereq'}{$nodehist} //= 0;
    $maxelapsed{'bymemreq'}{$memreqhist} //= 0;
    $maxelapsed{'bymemused'}{$memusedhist} //= 0;
    $maxelapsed{'bynodereq'}{$nodehist} //= 0;
    $usage{'bynodereq'}{$nodehist} //= 0;
    $usage{'bymemreq'}{$memreqhist} //= 0;
    $usage{'bymemused'}{$memusedhist} //= 0;

    $totaljobs += 1;

    $count{'bymemreq'}{$memreqhist} += 1;
    $count{'bymemused'}{$memusedhist} += 1;
    $count{'bynodereq'}{$nodehist} += 1;

    $elapsed{'bymemreq'}{$memreqhist} += $elapsedH;
    $elapsed{'bymemused'}{$memusedhist} += $elapsedH;
    $elapsed{'bynodereq'}{$nodehist} += $elapsedH;

    $usage{'bynodereq'}{$nodehist} += $cputimeraw/3600;
    $usage{'bymemreq'}{$memreqhist} += $cputimeraw/3600;
    $usage{'bymemused'}{$memusedhist} += $cputimeraw/3600;
    $totalusage += $cputimeraw/3600;

    if ($ncpus>0) {
      if ($elapsedH > $maxelapsed{'bymemreq'}{$memreqhist})   {$maxelapsed{'bymemreq'}{$memreqhist} = $elapsedH; }
      if ($elapsedH > $maxelapsed{'bymemused'}{$memusedhist}) {$maxelapsed{'bymemused'}{$memusedhist} = $elapsedH; }
      if ($elapsedH > $maxelapsed{'bynodereq'}{$nodehist})    {$maxelapsed{'bynodereq'}{$nodehist} = $elapsedH; }
    }
}
close SACCT;

print "Start: $startdate\n";
print "End: $enddate\n";
print "Cluster: $cluster\n";
print "Project(s): $project\n";
if (defined $user) {
  print "User: $user\n";
} else {
  print "User: all users\n";
}
if (defined $partition) {
  print "Partition: $partition\n";
} else {
  print "Partition: all partitions\n";
}

$totaljobs || die "\nNo jobs in this period!!!\n\n";

######################################################################
my $cumnum = 0;
my $cumusage = 0;
my $cumelapsed = 0;
my $elapsedmax = 0;

print "\nBy memory requested\n";
print "-----------------\n";
printf "%12s %8s %6s %14s %6s %7s %7s\n","Range","Number" ,"Cum %","Usage"   ,"Cum %","Elapsed","Elapsed";
printf "%12s %8s %6s %14s %6s %7s %7s\n",""     ,"of jobs",""     ,"(core H)",""     ,"(ave,H)","(max,H)";
print "-" x 66; print "\n";
foreach my $size (sort {&lbound($a) <=> &lbound($b)} keys %{ $count{'bymemreq'}}) {

  my $num=$count{'bymemreq'}{$size};
  my $thiselapsed = $elapsed{'bymemreq'}{$size};
  my $thisusage=$usage{'bymemreq'}{$size};
  my $thiselapsedmax = $maxelapsed{'bymemreq'}{$size};
  $cumnum += $num;
  $cumelapsed += $thiselapsed;
  $cumusage += $thisusage;
  if ($thiselapsedmax > $elapsedmax) {$elapsedmax = $thiselapsedmax;}
  my $cumfrac=$cumnum/$totaljobs;
  my $usagefrac=$thisusage/$totalusage;

  my $outformat = "%12s %8d %6.1f %14.1f %6.1f %7.1f %7.1f\n";
  #                ,Range  ,Number ,      Cum % ,   Usage  ,         Cum %,         Elapsed , Elapsed ;
  #                ,       ,of jobs,            ,  (core H),              ,         (ave,H) , (max,H) ;
  printf $outformat,$size  ,   $num,100*$cumfrac,$thisusage,100*$usagefrac,$thiselapsed/$num,$thiselapsedmax;
}
print "-" x 66; print "\n";
printf "%12s %8d %6.1f %14.1f %6.1f %7.1f %7.1f\n","Totals",$totaljobs,100*$cumnum/$totaljobs,$cumusage,100*$cumusage/$totalusage,$cumelapsed,$elapsedmax;

######################################################################
$cumnum = 0;
$cumusage = 0;
$cumelapsed = 0;
$elapsedmax = 0;

print "\nBy memory used\n";
print "-----------------\n";
printf "%12s %8s %6s %14s %6s %7s %7s\n","Range","Number" ,"Cum %","Usage"   ,"Cum %","Elapsed","Elapsed";
printf "%12s %8s %6s %14s %6s %7s %7s\n",""     ,"of jobs",""     ,"(core H)",""     ,"(ave,H)","(max,H)";
print "-" x 66; print "\n";
foreach my $size (sort {&lbound($a) <=> &lbound($b)} keys %{ $count{'bymemused'}}) {

  my $num=$count{'bymemused'}{$size};
  my $thiselapsed = $elapsed{'bymemused'}{$size};
  my $thisusage=$usage{'bymemused'}{$size};
  my $thiselapsedmax = $maxelapsed{'bymemused'}{$size};
  $cumnum += $num;
  $cumelapsed += $thiselapsed;
  $cumusage += $thisusage;
  if ($thiselapsedmax > $elapsedmax) {$elapsedmax = $thiselapsedmax;}
  my $cumfrac=$cumnum/$totaljobs;
  my $usagefrac=$thisusage/$totalusage;

  my $outformat = "%12s %8d %6.1f %14.1f %6.1f %7.1f %7.1f\n";
  #                ,Range  ,Number ,      Cum % ,   Usage  ,         Cum %,         Elapsed , Elapsed ;
  #                ,       ,of jobs,            ,  (core H),              ,         (ave,H) , (max,H) ;
  printf $outformat,$size  ,   $num,100*$cumfrac,$thisusage,100*$usagefrac,$thiselapsed/$num,$thiselapsedmax;
}
print "-" x 66; print "\n";
printf "%12s %8d %6.1f %14.1f %6.1f %7.1f %7.1f\n","Totals",$totaljobs,100*$cumnum/$totaljobs,$cumusage,100*$cumusage/$totalusage,$cumelapsed,$elapsedmax;

######################################################################
$cumnum = 0;
$cumusage = 0;
$cumelapsed = 0;
$elapsedmax = 0;

print "\nBy nodes requested\n";
print "---------------\n";
printf "%12s %8s %6s %14s %6s %7s %7s\n","Range","Number" ,"Cum %","Usage"   ,"Cum %","Elapsed","Elapsed";
printf "%12s %8s %6s %14s %6s %7s %7s\n",""     ,"of jobs","","(core H)","","(node H)","","(ave,H)","(max,H)";
print "-" x 66; print "\n";
foreach my $size (sort {&lbound($a) <=> &lbound($b)} keys %{ $count{'bynodereq'}}) {
  my $num=$count{'bynodereq'}{$size};
  my $thiselapsed = $elapsed{'bynodereq'}{$size};
  my $thisusage=$usage{'bynodereq'}{$size};
  my $thiselapsedmax = $maxelapsed{'bynodereq'}{$size};
  $cumnum += $num;
  $cumelapsed += $thiselapsed;
  $cumusage += $thisusage;
  if ($thiselapsedmax > $elapsedmax) {$elapsedmax = $thiselapsedmax;}
  my $cumfrac=$cumnum/$totaljobs;
  my $usagefrac=$thisusage/$totalusage;
  my $outformat = "%12s %8d %6.1f %14.1f %6.1f %7.1f %7.1f\n";
  #                ,Range  ,Number ,      Cum % ,   Usage  ,         Cum %,         Elapsed , Elapsed ;
  #                ,       ,of jobs,            ,  (core H),              ,         (ave,H) , (max,H) ;
  printf $outformat,$size  ,   $num,100*$cumfrac,$thisusage,100*$usagefrac,$thiselapsed/$num,$thiselapsedmax;

}
print "-" x 66; print "\n";
printf "%12s %8d %6.1f %14.1f %6.1f %7.1f %7.1f\n","Totals",$totaljobs,100*$cumnum/$totaljobs,$cumusage,100*$cumusage/$totalusage,$cumelapsed,$elapsedmax;

exit;

__END__

=head1 NAME

pawseyJobsBreakdown - Get Breakdown of Job Account Information From Pawsey Systems

=head1 SYNOPSIS

pawseyJobsBreakdown [options]

 Options:
   -project=id      specify project to query
   -cluster=name    specify cluster to query
   -mygroups        print information about all groups the user is in
   -begin=date      start date of query
   -end=date        end date of query
   -user=name       restrict query to one user
   -help            brief help message

=head1 OPTIONS

=over 8

=item B<-project>

Specify project ID that you wish to query the usage for. Defaults to IVEC_PROJECT environment variable.
Can be specified multiple times to sum over multiple projects.

=back

=item B<-cluster>

Specify cluster that you wish to query the usage for. Defaults to IVEC_CLUSTER environment variable.

=back

=item B<-mygroups>

Print out information for all groups the user is a member of.  This overrides the -projects option.

=back

=item B<-begin=s>

Set the start of the reporting period to the string "s".  Example format 2015-01-01T00:00:00.

=back

=item B<-end=s>

Set the end of the reporting period to the string "s".  Example format 2015-12-31T23:59:59.

=back

=item B<-user=s>

Restrict the query to a single user.

=back

=item B<-help>

Print a brief help message and exits.

=back


=head1 DESCRIPTION

B<pawseyJobsBreakdown> queries the Pawsey Supercomputing Centre systems for information about allocation statistics.

=cut

