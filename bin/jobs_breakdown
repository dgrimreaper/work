#!/usr/bin/perl

use POSIX;

my %shares;
my $start="2015-01-01T08:00:00";
my $end="2015-12-31T23:59:59";

sub toGB {
  my $num = $_[0];
  my $amount = 0;
  if ($num =~ s/[Gg].*//) { $amount = $num };
  if ($num =~ s/[Mm].*//) { $amount = $num/1000 };
  if ($num =~ s/[Kk].*//) { $amount = $num/1000000 };
  return $amount;
}

sub toHours {
  #[DD-[hh:]]mm:ss
  /(?:(\d+)-)?(?:(\d+):)?(\d+):(\d+)/;
  $answer=$1*24 + $2 + $3/60 + $4/3600;
  return $answer;
}

sub lbound {
  #[128-256) - returns 128
  $_[0] =~ /(\d+)-\d+/;
  return $1;
}

sub histogram {
  my $n = shift;
  my $histlow = "0";
  my $histhigh = "0";
  if ($n<1) {
    $histlow = "0";
    $histhigh = "0";
  } else {
    my $tmp = floor(log($n) / log(2));
    $histlow = 2 ** ($tmp);
    $histhigh = 2 ** ($tmp+1);
  }
  return "[$histlow\-$histhigh)";
}

my %sizehist;
my %nodes;
my $nodehist;
my $memhist;
my %cputime;
my %elapsed;
my %usage;
my $totaljobs = 0;
my $totalcputime = 0;
my $totalusage = 0;

open(SACCT,"sacct -n -a -P -S $start -E $end --format=jobid,user,account,reqcpus,alloccpus,nnodes,reqmem,MaxRSS,MaxVMSize,State,CPUTimeRAW,NCPUS,Elapsed |");
while(<SACCT>){
    next if /^[0-9]*\.batch/; # remove .batch but leave in job array components.
    chomp;
    my @fields=split /\|/;
    my $jobid     = $fields[0];
    my $node      = $fields[5];
    my $state     = $fields[9];
    next if $state =~ /PENDING/;
    my $size_req  = toGB($fields[6]);
    my $size_used = toGB($fields[7]);
    my $cputimeraw   = $fields[10];
    my $ncpus   = $fields[11];
    my $elapsed = $fields[12];
    my $elapsedH = toHours($elapsed);
    my $memhist = histogram($size_req);
    my $nodehist = histogram($node);
    if (not exists $sizehist{$memhist}) { $sizehist{$memhist} = 0; }
    if (not exists $nodes{$nodehist}) { $nodes{$nodehist} = 0; }
    if (not exists $cputime{'bynodereq'}{$nodehist}) { $cputime{'bynodereq'}{$nodehist} = 0; }
    if (not exists $cputime{'bymemreq'}{$memhist}) { $cputime{'bymemreq'}{$memhist} = 0; }
    if (not exists $elapsed{'bymemreq'}{$memhist}) { $elapsed{'bymemreq'}{$memhist} = 0; }
    if (not exists $elapsed{'bynodereq'}{$memhist}) { $elapsed{'bynodereq'}{$memhist} = 0; }
    if (not exists $elapsed{'maxformemreq'}{$memhist}) { $elapsed{'maxformemreq'}{$memhist} = 0; }
    if (not exists $elapsed{'maxfornodereq'}{$nodehist}) { $elapsed{'maxfornodereq'}{$nodehist} = 0; }
    if (not exists $usage{'bynodereq'}{$nodehist}) { $usage{'bynodereq'}{$nodehist} = 0; }
    if (not exists $usage{'bymemreq'}{$memhist}) { $usage{'bymemreq'}{$memhist} = 0; }
    $totaljobs += 1;
    $sizehist{$memhist} += 1;
    $nodes{$nodehist} += 1;
    $totalcputime += $cputimeraw/3600;
    $cputime{'bynodereq'}{$nodehist} += $cputimeraw/3600;
    $cputime{'bymemreq'}{$memhist} += $cputimeraw/3600;
    $totalusage += $elapsedH * $node;
    if ($ncpus>0) {
      $elapsed{'bymemreq'}{$memhist} += $elapsedH;
      $elapsed{'bynodereq'}{$nodehist} += $elapsedH;
      $usage{'bymemreq'}{$memhist} += $elapsedH * $node;
      $usage{'bynodereq'}{$nodehist} += $elapsedH * $node;
      if ($elapsedH > $elapsed{'maxformemreq'}{$memhist}) {$elapsed{'maxformemreq'}{$memhist} = $elapsedH; }
      if ($elapsedH > $elapsed{'maxfornodereq'}{$nodehist}) {$elapsed{'maxfornodereq'}{$nodehist} = $elapsedH; }
    }
}
close SACCT;

print "Start: $start\n";
print "End: $end\n";

######################################################################
print "By memory request\n";
printf "%12s %12s %8s %15s %8s %16s %8s %15s %15s\n","Request (GB)","Number","Cum %","Usage (coreH)","Cum %","Usage (nodeH)","Cum %","Elapsed(ave,H)","Elapsed(max,H)";
my $cpuusage = 0;
my $cumjobs = 0;
my $cumusage = 0;
my $cumelasped = 0;
my $maxelapsed = 0;
foreach $size (sort {&lbound($a) <=> &lbound($b)} keys %sizehist) {
  $cumjobs += $sizehist{$size};
  $cumelapsed += $elapsed{'bymemreq'}{$size};
  $cumusage += $usage{'bymemreq'}{$size};
  $cpuusage += $cputime{'bymemreq'}{$size};
  if ($elapsed{'maxformemreq'}{$size} > $maxelapsed) {$maxelapsed = $elapsed{'maxformemreq'}{$size};}
  printf "%12s %12d %8.2f %15.2f %8.2f %16.2f %8.2f %15.2f %15.2f\n",$size,$sizehist{$size},100*$cumjobs/$totaljobs,$cputime{'bymemreq'}{$size},100*$cpuusage/$totalcputime,$usage{'bymemreq'}{$size},100*$cumusage/$totalusage,$elapsed{'bymemreq'}{$size}/$sizehist{$size},$elapsed{'maxformemreq'}{$size};
}
print "-" x 117; print "\n";
printf "%12s %12d %8.2f %15.2f %8.2f %16.2f %8.2f %15.2f %15.2f\n","Totals",$totaljobs,100*$cumjobs/$totaljobs,$cpuusage,100*$cpuusage/$totalcputime,$cumusage,100*$cumusage/$totalusage,$cumelapsed/$cumjobs,$maxelapsed;

######################################################################
print "\n";
print "By node request\n";
printf "%12s %12s %8s %15s %8s %16s %8s %15s %15s\n","Nodes","Number","Cum %","Usage (coreH)","Cum %","Usage (nodeH)","Cum %","Elapsed(ave,H)","Elapsed(max,H)";
my $cpuusage = 0;
my $cumjobs = 0;
my $cumusage = 0;
my $cumelasped = 0;
my $maxelapsed = 0;
foreach $node (sort {&lbound($a) <=> &lbound($b)} keys %nodes) {
  $cumjobs += $nodes{$node};
  $cumelapsed += $elapsed{'bynodereq'}{$node};
  $cumusage += $usage{'bynodereq'}{$node};
  $cpuusage += $cputime{'bynodereq'}{$node};
  if ($elapsed{'maxfornodereq'}{$node} > $maxelapsed) {$maxelapsed = $elapsed{'maxfornodereq'}{$node};}
  printf "%12s %12d %8.2f %15.2f %8.2f %16.2f %8.2f %15.2f %15.2f\n",$node,$nodes{$node},100*$cumjobs/$totaljobs,$cputime{'bynodereq'}{$node},100*$cpuusage/$totalcputime,$usage{'bynodereq'}{$node},100*$cumusage/$totalusage,$elapsed{'bynodereq'}{$node}/$nodes{$node},$elapsed{'maxfornodereq'}{$node};
}
print "-" x 117; print "\n";
printf "%12s %12d %8.2f %15.2f %8.2f %16.2f %8.2f %15.2f %15.2f\n","Totals",$totaljobs,100*$cumjobs/$totaljobs,$cpuusage,100*$cpuusage/$totalcputime,$cumusage,100*$cumusage/$totalusage,$cumelapsed/$cumjobs,$maxelapsed;

